# simulation.py
import random
import time
from typing import Tuple

from agentes.agent_monster import AgenteReflejoMonstruo
from agentes.agent_robot import AgenteRacionalRobot
from agentes.environment import EntornoOperacion


class SimulacionEnergetica:
    """
    Motor principal de simulaci√≥n dentro del **Entorno de Operaci√≥n Energ√©tico**.

    Este componente coordina la interacci√≥n entre:
      ‚Ä¢ Los **Agentes Energ√©ticos** (monstruos reflejo).
      ‚Ä¢ Los **Agentes Materiales** (robots racionales).
      ‚Ä¢ El **Entorno de Operaci√≥n Energ√©tico** (espacio tridimensional N¬≥).

    Cada iteraci√≥n representa un **Ciclo Energ√©tico**, durante el cual:
      - Los monstruos reflejo se activan de forma peri√≥dica (cada K ciclos).
      - Los robots racionales perciben, deciden y act√∫an en consecuencia.
      - Se actualiza la topolog√≠a del entorno y se visualiza su estado parcial.

    Este motor constituye la capa de control de alto nivel que gestiona
    la din√°mica completa del sistema energ√©tico.
    """

    def __init__(
        self,
        N: int = 6,
        Nrobots: int = 2,
        Nmonstruos: int = 2,
        ticks: int = 15,
        K_monstruo: int = 3,
        seed: int | None = None
    ) -> None:
        """
        Inicializa la simulaci√≥n configurando el **Entorno de Operaci√≥n Energ√©tico**
        y creando las entidades energ√©ticas (robots racionales y monstruos reflejo).

        Args:
            N (int): Tama√±o del lado del entorno c√∫bico (N√óN√óN).
            Nrobots (int): N√∫mero de robots racionales a generar.
            Nmonstruos (int): N√∫mero de monstruos reflejo a generar.
            ticks (int): Duraci√≥n total de la simulaci√≥n (n√∫mero de ciclos energ√©ticos).
            K_monstruo (int): Frecuencia de activaci√≥n de los monstruos reflejo.
            seed (Optional[int]): Semilla opcional para reproducibilidad.
        """
        self.N = N
        self.Nrobots = Nrobots
        self.Nmonstruos = Nmonstruos
        self.ticks = ticks
        self.K_monstruo = K_monstruo

        # Entorno de Operaci√≥n Energ√©tico inicial
        self.entorno = EntornoOperacion(N=N, Psoft=0.2, Pfree=0.8, seed=seed)
        self._inicializar_agentes()

    # -------------------------------------------------------------------------
    # CONFIGURACI√ìN INICIAL
    # -------------------------------------------------------------------------
    def _inicializar_agentes(self) -> None:
        """
        Crea y posiciona los **Agentes Energ√©ticos** y **Materiales** dentro del entorno.

        Este m√©todo cumple las reglas de distribuci√≥n de entidades seg√∫n los requisitos:
          - Los **Robots Racionales** se ubican en Zonas Libres aleatorias.
          - Los **Monstruos Reflejo** se ubican tambi√©n en Zonas Libres distintas.
          - Ambos pueden coexistir en la misma celda, pero no con agentes del mismo tipo.
        """
        # Robots racionales (Agentes Materiales)
        for i in range(self.Nrobots):
            while True:
                x, y, z = self._posicion_aleatoria()
                robot = AgenteRacionalRobot(id=i + 1, x=x, y=y, z=z)
                if self.entorno.registrar_robot(robot):
                    break

        # Monstruos reflejo (Agentes Energ√©ticos)
        for i in range(self.Nmonstruos):
            while True:
                x, y, z = self._posicion_aleatoria()
                monstruo = AgenteReflejoMonstruo(id=i + 1, x=x, y=y, z=z)
                if self.entorno.registrar_monstruo(monstruo):
                    break

    def _posicion_aleatoria(self) -> Tuple[int, int, int]:
        """
        Genera una posici√≥n aleatoria v√°lida dentro del volumen energ√©tico N¬≥.

        Returns:
            Tuple[int, int, int]: Coordenadas (x, y, z) dentro de los l√≠mites del entorno.
        """
        return (
            random.randint(0, self.N - 1),
            random.randint(0, self.N - 1),
            random.randint(0, self.N - 1)
        )

    # -------------------------------------------------------------------------
    # MOTOR DE SIMULACI√ìN
    # -------------------------------------------------------------------------
    def ejecutar(self, delay: float = 0.5) -> None:
        """
        Ejecuta el **Ciclo Energ√©tico Principal** de la simulaci√≥n.

        En cada ciclo del sistema energ√©tico:
          1. Los **Monstruos Reflejo** ejecutan su ciclo `percibir_decidir_actuar()`
             con frecuencia K_monstruo.
          2. Los **Robots Racionales** perciben, deciden y act√∫an de forma racional.
          3. Se actualiza la **Capa Energ√©tica** visual del entorno.
          4. Se respeta un retardo temporal (`delay`) entre ciclos.

        Args:
            delay (float): Tiempo (en segundos) de pausa entre ciclos energ√©ticos.
        """
        print(f"\n‚ö° Iniciando Simulaci√≥n Energ√©tica (N={self.N})")
        print(f"   Robots: {len(self.entorno.robots)} | Monstruos: {len(self.entorno.monstruos)}\n")

        for t in range(self.ticks):
            print(f"\n=== Ciclo Energ√©tico {t} ===")

            # --- Activaci√≥n de los agentes energ√©ticos (monstruos reflejo) ---
            for monstruo in list(self.entorno.monstruos):
                evento = monstruo.percibir_decidir_actuar(t, self.entorno, self.K_monstruo)
                accion = evento.get("accion")
                exito = evento.get("exito", False)
                resultado = evento.get("resultado", {})

                if exito:
                    print(f"üëæ Monstruo {monstruo.id} ‚Üí {accion} a {resultado.get('nueva_pos')}")
                else:
                    print(f"üëæ Monstruo {monstruo.id} ‚Üí inactivo en {resultado.get('nueva_pos')}")

            # --- Activaci√≥n de los agentes materiales (robots racionales) ---
            for robot in list(self.entorno.robots):
                evento = robot.percibir_decidir_actuar(t, self.entorno, self.entorno.robots, self.entorno.monstruos)
                accion = evento.get("accion", "?")
                exito = evento.get("exito", False)
                razon = evento.get("razon", "")

                print(f"ü§ñ Robot {robot.id} ‚Üí {accion} (orientaci√≥n: {robot.orientacion}) ‚Üí {razon}")

                # Autodestrucci√≥n por uso del Vacuumator (seg√∫n especificaci√≥n)
                if accion == "VACUUMATOR" and exito:
                    print(f"üí• Robot {robot.id} fue destruido al usar el Vacuumator con √©xito.")
                    self.entorno.eliminar_robot(robot.id)
                    break  # detener iteraci√≥n; la lista cambi√≥

            # --- Visualizaci√≥n del entorno en una capa central ---
            self.entorno.visualizar_capa(self.N // 2)
            time.sleep(delay)

        print("\n‚úÖ Simulaci√≥n Energ√©tica finalizada.")

    # -------------------------------------------------------------------------
    # REPRESENTACI√ìN
    # -------------------------------------------------------------------------
    def __repr__(self) -> str:
        """
        Retorna una representaci√≥n textual de la configuraci√≥n de la simulaci√≥n.

        Returns:
            str: Descripci√≥n con tama√±o del entorno, n√∫mero de agentes y duraci√≥n.
        """
        return (
            f"<SimulacionEnergetica N={self.N}, Robots={len(self.entorno.robots)}, "
            f"Monstruos={len(self.entorno.monstruos)}, Ticks={self.ticks}>"
        )
