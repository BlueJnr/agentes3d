# simulation.py
import random
import time
from typing import Tuple

from agentes.agent_monster import AgenteReflejoMonstruo
from agentes.agent_robot import AgenteRacionalRobot
from agentes.environment import EntornoOperacion


class SimulacionEnergetica:
    """
    Motor principal de simulaci√≥n dentro del Entorno de Operaci√≥n Energ√©tico.

    Coordina la interacci√≥n entre el Entorno y los agentes energ√©ticos
    (robots racionales y monstruos reflejo).
    Cada ciclo temporal representa una transici√≥n del sistema energ√©tico.
    """

    def __init__(
            self,
            N: int = 6,
            Nrobots: int = 2,
            Nmonstruos: int = 2,
            ticks: int = 15,
            K_monstruo: int = 3,
            seed: int | None = None
    ) -> None:
        """
        Inicializa la simulaci√≥n configurando el Entorno de Operaci√≥n
        y creando las entidades energ√©ticas.

        Args:
            N: Tama√±o del lado del entorno c√∫bico (N√óN√óN).
            Nrobots: N√∫mero de robots racionales.
            Nmonstruos: N√∫mero de monstruos reflejo.
            ticks: N√∫mero total de ciclos de simulaci√≥n.
            K_monstruo: Frecuencia de activaci√≥n de los monstruos reflejo.
            seed: Semilla para reproducibilidad.
        """
        self.N = N
        self.Nrobots = Nrobots
        self.Nmonstruos = Nmonstruos
        self.ticks = ticks
        self.K_monstruo = K_monstruo

        # Inicializa el entorno de operaci√≥n energ√©tico
        self.entorno = EntornoOperacion(N=N, Psoft=0.2, Pfree=0.8, seed=seed)
        self._inicializar_agentes()

    # -------------------------------------------------------------------------
    # CONFIGURACI√ìN INICIAL
    # -------------------------------------------------------------------------
    def _inicializar_agentes(self) -> None:
        """
        Crea y posiciona los agentes energ√©ticos (robots y monstruos)
        en Zonas Libres aleatorias dentro del Entorno de Operaci√≥n.
        """
        # Robots racionales
        for i in range(self.Nrobots):
            while True:
                x, y, z = self._posicion_aleatoria()
                robot = AgenteRacionalRobot(id=i + 1, x=x, y=y, z=z)
                if self.entorno.registrar_robot(robot):
                    break

        # Monstruos reflejo
        for i in range(self.Nmonstruos):
            while True:
                x, y, z = self._posicion_aleatoria()
                monstruo = AgenteReflejoMonstruo(id=i + 1, x=x, y=y, z=z)
                if self.entorno.registrar_monstruo(monstruo):
                    break

    def _posicion_aleatoria(self) -> Tuple[int, int, int]:
        """Genera una posici√≥n aleatoria dentro de los l√≠mites del entorno."""
        return (
            random.randint(0, self.N - 1),
            random.randint(0, self.N - 1),
            random.randint(0, self.N - 1)
        )

    # -------------------------------------------------------------------------
    # MOTOR DE SIMULACI√ìN
    # -------------------------------------------------------------------------
    def ejecutar(self, delay: float = 0.5) -> None:
        """
        Ejecuta el ciclo principal de la simulaci√≥n energ√©tica.

        En cada ciclo:
          - Los monstruos reflejo act√∫an cada K_monstruo ciclos.
          - Los robots racionales perciben, deciden y act√∫an.
          - Se visualiza una capa del Entorno de Operaci√≥n.

        Args:
            delay: Tiempo (segundos) de espera entre ticks.
        """
        print(f"\n‚ö° Iniciando Simulaci√≥n Energ√©tica (N={self.N})")
        print(f"   Robots: {len(self.entorno.robots)} | Monstruos: {len(self.entorno.monstruos)}\n")

        for t in range(self.ticks):
            print(f"\n=== Ciclo Energ√©tico {t} ===")

            # --- Monstruos reflejo ---
            for monstruo in list(self.entorno.monstruos):
                evento = monstruo.percibir_decidir_actuar(
                    t, self.entorno, self.K_monstruo
                )

                if evento.get("se_movio", False):
                    print(f"üëæ Monstruo {monstruo.id} ‚Üí {evento['accion']} hacia {evento['nueva_pos']}")
                else:
                    print(f"üëæ Monstruo {monstruo.id} permanece inactivo en {evento['nueva_pos']}")

            # --- Robots racionales ---
            for robot in list(self.entorno.robots):
                evento = robot.percibir_decidir_actuar(
                    t, self.entorno, self.entorno.robots, self.entorno.monstruos
                )
                accion = evento.get("accion", "?")
                print(f"ü§ñ Robot {robot.id} ‚Üí {accion} (orientaci√≥n: {robot.orientacion})")

            # --- Visualizaci√≥n del entorno energ√©tico ---
            self.entorno.visualizar_capa(self.N // 2)
            time.sleep(delay)

        print("\n‚úÖ Simulaci√≥n Energ√©tica finalizada.")

    # -------------------------------------------------------------------------
    # REPRESENTACI√ìN
    # -------------------------------------------------------------------------
    def __repr__(self) -> str:
        """Representaci√≥n textual de la simulaci√≥n energ√©tica."""
        return (
            f"<SimulacionEnergetica N={self.N}, Robots={len(self.entorno.robots)}, "
            f"Monstruos={len(self.entorno.monstruos)}, Ticks={self.ticks}>"
        )
